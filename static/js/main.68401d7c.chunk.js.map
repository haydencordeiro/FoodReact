{"version":3,"sources":["serviceWorker.js","cards.jsx","multi.jsx","index.js"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","root","maxWidth","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","Album","props","classes","React","useState","expanded","setExpanded","Card","className","CardHeader","Avatar","aria-label","googleId","action","IconButton","title","Title","subheader","Subheader","CardMedia","image","link","CardContent","Typography","variant","color","component","Description","CardActions","disableSpacing","clsx","onClick","aria-expanded","Cards","post","setPost","query","setQuery","callApi","setCallApi","useEffect","getData","a","URL","fetch","responce","json","data","console","log","hits","type","onChange","e","target","value","map","i","key","recipe","label","totalTime","calories","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.68401d7c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\n// import Collapse from '@material-ui/core/Collapse';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '56.25%', // 16:9\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n  avatar: {\r\n    backgroundColor: red[500],\r\n  },\r\n}));\r\n\r\n\r\n\r\nexport default function Album(props) {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n           {props.googleId}\r\n          </Avatar>\r\n        }\r\n        action={\r\n          <IconButton aria-label=\"settings\">\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        }\r\n        title={props.Title}\r\n        subheader={props.Subheader}\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={props.link}\r\n        title={props.Title}\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n         {props.Description}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions disableSpacing>\r\n        <IconButton aria-label=\"add to favorites\" >\r\n          <FavoriteIcon />\r\n        </IconButton>\r\n        <IconButton aria-label=\"delete_forever\">\r\n          <ShareIcon />\r\n        </IconButton>\r\n        <IconButton\r\n          className={clsx(classes.expand, {\r\n            [classes.expandOpen]: expanded,\r\n          })}\r\n          onClick={handleExpandClick}\r\n          aria-expanded={expanded}\r\n          aria-label=\"show more\"\r\n        >\r\n          <ExpandMoreIcon />\r\n        </IconButton>\r\n      </CardActions>\r\n\r\n    </Card>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState,useEffect } from 'react';\r\nimport Album from './cards';\r\nimport './index.css'\r\n\r\nconst Cards=()=>\r\n{\r\n\r\nconst [post,setPost]=useState(   [])\r\nconst[query,setQuery]=useState('chicken')\r\nconst[callApi,setCallApi]=useState('')\r\n\r\nuseEffect(\r\n    ()=>{\r\n        getData()\r\n    },[callApi]\r\n)\r\n\r\nconst getData=async()=>\r\n{\r\nconst APP_ID='3d54f08c';\r\nconst APP_KEY='26abad2c177151ac2b992da473d20c78';\r\nconst URL=`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\r\nconst responce=await fetch(URL)\r\nconst data=await responce.json()\r\nconsole.log(data.hits);\r\nsetPost(data.hits)\r\nconsole.log(post)\r\n}\r\n\r\nconst takeQuery=(e)=>\r\n{\r\n    setQuery(e.target.value);\r\n}\r\n\r\nconst searchQuery=()=>\r\n{\r\n    setCallApi(query);\r\n    \r\n}\r\n\r\nreturn ( \r\n<div >\r\n    <form>\r\n    <input type='text' onChange={takeQuery} className=\"bar\" ></input>\r\n    \r\n    <button onClick={searchQuery} className='btn'>Submit</button>\r\n    </form>\r\n   { post.map(i=><Album\r\n        key={i.recipe.label+i.recipe.totalTime+i.recipe.calories}\r\n        googleId={i.recipe.totalTime}\r\n        Title={i.recipe.label}\r\n        Subheader={i.Subheader}\r\n        Description={'calories'+i.recipe.calories}\r\n        link={i.recipe.image}\r\n        \r\n        />)\r\n        }\r\n        </div>\r\n        );\r\n\r\n    \r\n}\r\nexport default Cards;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Cards from'./multi'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Cards />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}